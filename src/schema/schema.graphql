type Query {
    project(id: ID!): Project!
    projects: [Project!]!

    user(id: ID!): User!
    users: [User!]!

    userPartialModel(id: ID!): UserPartialModel!
    userPartialModels: [UserPartialModel!]!


}

type Mutation {
    login(email: String!, password: String!): String
    signup(name: String!, email: String!, password: String!): String

    # createProject(name: String): Project!
    # updateProject(projectId: ID!, data: ProjectUpdateInput!): Project!
    # deleteProject(projectId: ID!): Project!
}

type User {
    id: ID!
    firstname: String!
    lastname: String!
    email: String!
    phoneNumber: String
    verified: Boolean!
    projects: [Project!]
}


type Project {
    id: ID!
    name: String!
    description: String
    user: User!
    # maturityModels: [MaturityModel!]!
    created: String!
    updated: String!
}

type MaturityModel {
    id: ID!
    name: string
    maturityLevel: number;

    userPartialModels: [UserPartialModel!]!

    created: Date!
    creator: String!
    updated: Date!
    updater: String!
}

type UserPartialModel {
    id: ID!
    maturityLevelEvaluationMetrics: Float

    partialModel: PartialModel!
    userEvaluationAreas: [UserEvaluationMetric!]!
    maturityModel: MaturityModel!
    subUserPartialModels: [UserPartialModel]!
    superUserPartialModel: UserPartialModel

    created: Date!
    creator: String!
    updated: Date!
    updater: String!
}