type Query {
    project(id: ID!): Project
    projects: [Project!]
    projectOfUser(id: ID!): Project
    projectsOfUser: [Project!]

    user(id: ID!): User
    users: [User!]
    profileOfUser: User!
    checkEmailAddress(emailAddress: String): Boolean!

    consistencyMatrixOfUser(id: ID!): ConsistencyMatrix
    consistencyMatricesOfUser: [ConsistencyMatrix!]

    userMaturityModel(id: ID!): UserMaturityModel
    userMaturityModels: [UserMaturityModel!]
    userMaturityModelOfUser(id: ID!): UserMaturityModel
    userMaturityModelsOfUser: [UserMaturityModel!]

    userPartialModel(id: ID!): UserPartialModel
    userPartialModels: [UserPartialModel!]

    userEvaluationMetric(id: ID!): UserEvaluationMetric
    userEvaluationMetrics: [UserEvaluationMetric!]

    partialModel(id: ID!): PartialModel
    partialModels: [PartialModel!]!

    evaluationMetric(id: ID!): EvaluationMetric
    evaluationMetrics: [EvaluationMetric!]!

    maturityModel(id: ID!): MaturityModel!
}

type Mutation {
    login(userLoginRequest: UserLoginRequest!): String
    register(userRegistrationRequest: UserRegistrationRequest!): String

    createUserMaturityModel(userMaturityModel: CreateUserMaturityModelRequest!): UserMaturityModel
    createConsistencyMatrix(consistencyMatrixModel: CreateConsistencyMatrixRequest!): ConsistencyMatrix
}

input CreateConsistencyMatrixRequest {
    name: String!
    filename: String!
    description: String!
    consistencyMatrixBlobBase64String: String!
    projectId: ID!
}

input CreateUserMaturityModelRequest{
    name: String!
    maturityLevel: Float
    projectId: ID!
    userPartialModels: [CreateUserPartialModelRequest!]!
}

input CreateUserPartialModelRequest{
    maturityLevelEvaluationMetrics: Float!
    partialModelId: ID!
    userEvaluationMetrics: [CreateUserEvaluationMetricRequest]
    subUserPartialModels: [CreateUserPartialModelRequest]
    superUserPartialModel: CreateUserPartialModelRequest
}

input CreateUserEvaluationMetricRequest{
    valueEvaluationMetric: Float!
    evaluationMetricId: ID!
}

input UserLoginRequest{
    email: String!
    password: String!
}

input UserRegistrationRequest {
    email: String!
    password: String!
    firstname: String!
    lastname: String!
    phoneNumber: String
}

type User {
    id: ID!
    firstname: String!
    lastname: String!
    email: String!
    phoneNumber: String
    verified: Boolean!
    projects: [Project!]
}


type Project {
    id: ID!
    name: String!
    description: String
    user: User!
    userMaturityModels: [UserMaturityModel!]!
    created: String!
    updated: String!
}

type ConsistencyMatrix {
    id: ID!
    name: String!
    description: String
    filename: String!
    fileData: String!

    projects: [Project!]!


    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type UserMaturityModel {
    id: ID!
    name: String
    maturityLevel: Float

    projects: [Project!]!
    userPartialModels: [UserPartialModel!]!

    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type UserPartialModel {
    id: ID!
    maturityLevelEvaluationMetrics: Float

    userMaturityModel: UserMaturityModel!
    superUserPartialModel: UserPartialModel
    subUserPartialModels: [UserPartialModel]!
    userEvaluationMetrics: [UserEvaluationMetric!]!
    partialModel: PartialModel!

    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type UserEvaluationMetric {
    id: ID!
    valueEvaluationMetric: Float!

    userPartialModel: UserPartialModel!
    evaluationMetric: EvaluationMetric!

    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type PartialModel {
    id: ID!
    name: String!
    description: String
    weight: Float

    evaluationMetrics: [EvaluationMetric!]!
    subPartialModels: [PartialModel!]
    superPartialModel: PartialModel


    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type EvaluationMetric {
    id: ID!
    name: String!
    description: String
    weight: Float
    maxValue: Int!
    minValue: Int!

    partialModel: PartialModel

    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type MaturityModel {
    id: ID!
    name: String!
    language: String!
    version: Int!
    partialModels: [PartialModel!]!
    created: String!
    creator: String!
    updated: String!
    updater: String!
}
