type Query {
    project(id: ID!): Project!
    projects: [Project!]!

    user(id: ID!): User!
    users: [User!]!

    maturityModel(id: ID!): MaturityModel!
    maturityModels: [MaturityModel!]!

    userPartialModel(id: ID!): UserPartialModel!
    userPartialModels: [UserPartialModel!]!

    userEvaluationMetric(id: ID!): UserEvaluationMetric!
    userEvaluationMetrics: [UserEvaluationMetric!]!

    partialModel(id: ID!): PartialModel!
    partialModels: [PartialModel!]!

    evaluationMetric(id: ID!): EvaluationMetric!
    evaluationMetrics: [EvaluationMetric!]!
}

type Mutation {
    login(email: String!, password: String!): String
    signup(name: String!, email: String!, password: String!): String

    # createProject(name: String): Project!
    # updateProject(projectId: ID!, data: ProjectUpdateInput!): Project!
    # deleteProject(projectId: ID!): Project!
}

# alle nested funktionieren nicht au√üer user-project und project-user

type User {
    id: ID!
    firstname: String!
    lastname: String!
    email: String!
    phoneNumber: String
    verified: Boolean!
    projects: [Project!]
}


type Project {
    id: ID!
    name: String!
    description: String
    user: User!
    maturityModels: [MaturityModel!]!
    created: String!
    updated: String!
}

type MaturityModel {
    id: ID!
    name: String
    maturityLevel: Float

    projects: [Project!]!
    userPartialModels: [UserPartialModel!]!

    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type UserPartialModel {
    id: ID!
    maturityLevelEvaluationMetrics: Float

    maturityModel: MaturityModel!
    superUserPartialModel: UserPartialModel
    subUserPartialModels: [UserPartialModel]!
    userEvaluationMetrics: [UserEvaluationMetric!]!
    partialModel: PartialModel!

    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type UserEvaluationMetric {
    id: ID!
    valueEvaluationMetric: Float!

    userPartialModel: UserPartialModel!
    evaluationMetric: EvaluationMetric!

    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type PartialModel {
    id: ID!
    name: String!
    description: String
    weight: Float

    evaluationMetrics: [EvaluationMetric!]!
    subPartialModels: [PartialModel!]
    superPartialModel: PartialModel


    created: String!
    creator: String!
    updated: String!
    updater: String!
}

type EvaluationMetric {
    id: ID!
    name: String!
    description: String
    weight: Float

    partialModel: PartialModel

    created: String!
    creator: String!
    updated: String!
    updater: String!
}